1.2sum
Code-:class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {};
    }
};

2.Largest subarray with k sum
code-:
class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        unordered_map<int,int> mp;
        int sum = 0;
        int length = 0;
        mp.insert({0 , -1});
        for(int i = 0;i<n;i++)
        {
            sum += A[i];
            if(mp.find(sum) != mp.end())
            {
                length = max(length , i -mp[sum]);
            }
            else 
            {
                mp.insert({sum , i});
            }
        }
        return length;
    }
};
